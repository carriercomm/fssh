#!/usr/bin/env python
#
# Paste from GUI copy-paste buffer to stdout
#
# Author: Kyle Manna -> http://blog.kylemanna.com
# License: MIT -> http://opensource.org/licenses/MIT
#

import os
import subprocess
import sys

if __name__ == '__main__':

   paste_args = ''
   port = ''
   user = ''
   path = ''
   paste = ''

   # Check if invoked from an tmux+fssh session
   if 'TMUX' in os.environ:
      out = subprocess.check_output(['tmux', 'showenv'])

      for line in out.splitlines():
         (k, s, v) = line.partition('=')

         if k == 'LC_FSSH_PASTE_ARGS': paste_args = v
         elif k == 'LC_FSSH_PORT': port = v
         elif k == 'LC_FSSH_USER': user = v
         elif k == 'LC_FSSH_PATH': path = v
         elif k == 'LC_FSSH_PASTE': paste = v
         elif k == 'SSH_AUTH_SOCK': os.environ['SSH_AUTH_SOCK'] = v
         #else: print 'Unknown key: ', k

   # Check if invoked from an fssh session
   elif ('LC_FSSH_PORT' in os.environ
        and 'LC_FSSH_USER' in os.environ
        and 'LC_FSSH_PASTE' in os.environ):

      paste_args = os.environ.get('LC_FSSH_PASTE_ARGS', '')
      port = os.environ['LC_FSSH_PORT']
      user = os.environ['LC_FSSH_USER']
      path = os.environ.get('LC_FSSH_PATH', '')
      paste = os.environ['LC_FSSH_PASTE']


   if port and user and paste:

      # Connect to the remote host and issue copy command
      argv = ['ssh',
              paste_args,
              '-o', 'VisualHostKey=no',
              '-p', port,
              '-l', user,
              'localhost',
              'PATH=' + path,
              paste]

      #print "argv = {}".format(argv)

      p = subprocess.Popen(argv, stdout=subprocess.PIPE)

      result = p.communicate()

      sys.stdout.write(result[0])

   else:
      # Assume issued locally, no ssh
      if sys.platform.startswith('darwin'):
         subprocess.call(['reattach-to-user-namespace', 'pbpaste'])
      else:
         subprocess.call(['xclip', '-o'])
