#!/bin/bash
#
# Reverse SSH wrapper
#
# Author: Kyle Manna -> http://blog.kylemanna.com
# License: MIT -> http://opensource.org/licenses/MIT
#
# Goal of this is to reliably setup a ssh tunnel so that the remote host can
# communicate with the local host.
# fssh remote-host
#
# Write to the host UI's copy-paste buffer:
# $ alias ui_copy='ssh -o "StrictHostKeyChecking=no" -p $LC_FSSH_PORT -l $LC_FSSH_USER localhost $LC_FSSH_COPY'
# $ echo "boom" | ui_copy
# 
#
# Read the host UI's copy-paste buffer:
# $ alias ui_paste='ssh -o "StrictHostKeyChecking=no" -p $LC_FSSH_PORT -l $LC_FSSH_USER localhost $LC_FSSH_PASTE'
# $ ui_paste
#

ARGS="$@"

# Attempt to parse the stardard ssh args so we can find the hostname
#
# ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-e escape_char]
#     [-F configfile] [-I pkcs11] [-i identity_file] [-L [bind_address:]port:host:hostport] [-l login_name]
#     [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-R [bind_address:]port:host:hostport] [-S ctl_path]
#     [-W host:port] [-w local_tun[:remote_tun]] [user@]hostname [command]

options=":1246AaCfgKkMNnqsTtVvXxYyb:c:D:e:F:I:i:L:l:m:O:o:p:R:S:W:w:"

while getopts $options option; do
   # nop, need to increment $OPTIND though
   continue
   #case $option in
      #\? ) echo "Unknown option: -$OPTARG" >&2 ;;
      #:  ) echo "Missing option argument for -$OPTARG" >&2 ;;
      #*  ) echo "Unimplimented option: -$option" >&2 ;;
   #esac
done
shift $(($OPTIND - 1))

HOST=$1

# Guess an unused port on the remote host, use ExitOnForwardFailure if
# guessed wrong.  SSH will present an error message and exit.
PORT=$(($RANDOM + 10000))

export LC_FSSH_USER=$USER
export LC_FSSH_PORT=$PORT
export LC_FSSH_PATH=$PATH
export LC_FSSH_COPY_ARGS="-o HostKeyAlias=$HOSTNAME"
export LC_FSSH_PASTE_ARGS="-o HostKeyAlias=$HOSTNAME"

if [ "$(uname)" = "Darwin" ]; then
   export LC_FSSH_COPY="reattach-to-user-namespace pbcopy"
   export LC_FSSH_PASTE="reattach-to-user-namespace pbpaste"
else
   export LC_FSSH_COPY="DISPLAY=$DISPLAY xclip -i"
   export LC_FSSH_PASTE="DISPLAY=$DISPLAY xclip -o"
fi

# Start actual ssh command
echo ">> Attempting reverse SSH forwarding via $HOST:$PORT to $LC_FSSH_USER@$HOSTNAME"
ssh=$(type -fp ssh)
$ssh -R $PORT:localhost:22 \
   -o ExitOnForwardFailure=yes \
   -o SendEnv=LC_FSSH_USER \
   -o SendEnv=LC_FSSH_PORT \
   -o SendEnv=LC_FSSH_COPY \
   -o SendEnv=LC_FSSH_COPY_ARGS \
   -o SendEnv=LC_FSSH_PASTE \
   -o SendEnv=LC_FSSH_PASTE_ARGS \
   -o SendEnv=LC_FSSH_PATH \
   $ARGS
